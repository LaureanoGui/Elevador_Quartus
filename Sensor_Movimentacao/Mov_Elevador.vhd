-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- Generated by Quartus Prime Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition
-- Created on Sun Apr 30 14:59:06 2023

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY Mov_Elevador IS
    PORT (
        clock : IN STD_LOGIC;
        reset : IN STD_LOGIC := '0';
        EN : IN STD_LOGIC := '0';
        ACT : IN STD_LOGIC := '0';
        SA0 : OUT STD_LOGIC;
        SA1 : OUT STD_LOGIC;
        SA2 : OUT STD_LOGIC
    );
END Mov_Elevador;

ARCHITECTURE BEHAVIOR OF Mov_Elevador IS
    TYPE type_fstate IS (T,A1,A2,A3,A4);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reset,reg_fstate)
    BEGIN
        IF (reset='1') THEN
            fstate <= T;
        ELSIF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,EN,ACT)
    BEGIN
        SA0 <= '0';
        SA1 <= '0';
        SA2 <= '0';
        CASE fstate IS
            WHEN T =>
                IF ((EN = '0')) THEN
                    reg_fstate <= T;
                ELSIF (((ACT = '1') AND (EN = '1'))) THEN
                    reg_fstate <= A1;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= T;
                END IF;

                SA0 <= '1';

                SA1 <= '0';

                SA2 <= '0';
            WHEN A1 =>
                IF (((ACT = '0') AND (EN = '1'))) THEN
                    reg_fstate <= T;
                ELSIF ((EN = '0')) THEN
                    reg_fstate <= A1;
                ELSIF (((ACT = '1') AND (EN = '1'))) THEN
                    reg_fstate <= A2;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= A1;
                END IF;

                SA0 <= '0';

                SA1 <= '1';

                SA2 <= '0';
            WHEN A2 =>
                IF (((ACT = '0') AND (EN = '1'))) THEN
                    reg_fstate <= A1;
                ELSIF ((EN = '0')) THEN
                    reg_fstate <= A2;
                ELSIF (((ACT = '1') AND (EN = '1'))) THEN
                    reg_fstate <= A3;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= A2;
                END IF;

                SA0 <= '1';

                SA1 <= '1';

                SA2 <= '0';
            WHEN A3 =>
                IF (((ACT = '0') AND (EN = '1'))) THEN
                    reg_fstate <= A2;
                ELSIF ((EN = '0')) THEN
                    reg_fstate <= A3;
                ELSIF (((ACT = '1') AND (EN = '1'))) THEN
                    reg_fstate <= A4;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= A3;
                END IF;

                SA0 <= '0';

                SA1 <= '0';

                SA2 <= '1';
            WHEN A4 =>
                IF (((ACT = '0') AND (EN = '1'))) THEN
                    reg_fstate <= A3;
                ELSIF ((EN = '0')) THEN
                    reg_fstate <= A4;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= A4;
                END IF;

                SA0 <= '1';

                SA1 <= '0';

                SA2 <= '1';
            WHEN OTHERS => 
                SA0 <= 'X';
                SA1 <= 'X';
                SA2 <= 'X';
                report "Reach undefined state";
        END CASE;
    END PROCESS;
END BEHAVIOR;
