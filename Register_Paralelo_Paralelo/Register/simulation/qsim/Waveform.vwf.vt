// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/13/2023 16:43:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Registrador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Registrador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CP;
reg D0;
reg D1;
reg D2;
reg MR;
// wires                                               
wire S0;
wire S1;
wire S2;

// assign statements (if any)                          
Registrador i1 (
// port map - connection between master ports and signals/registers   
	.CP(CP),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.MR(MR),
	.S0(S0),
	.S1(S1),
	.S2(S2)
);
initial 
begin 
#1000000 $finish;
end 

// CP
always
begin
	CP = 1'b0;
	CP = #10000 1'b1;
	#10000;
end 

// MR
initial
begin
	MR = 1'b1;
end 

// D2
initial
begin
	D2 = 1'b0;
	D2 = #80000 1'b1;
	D2 = #80000 1'b0;
	D2 = #400000 1'b1;
	# 80000;
	repeat(2)
	begin
		D2 = 1'b0;
		D2 = #80000 1'b1;
		# 80000;
	end
	D2 = 1'b0;
end 

// D1
initial
begin
	repeat(2)
	begin
		D1 = 1'b0;
		D1 = #40000 1'b1;
		# 40000;
	end
	D1 = 1'b0;
	D1 = #40000 1'b1;
	D1 = #10000 1'b0;
	D1 = #390000 1'b1;
	# 40000;
	repeat(4)
	begin
		D1 = 1'b0;
		D1 = #40000 1'b1;
		# 40000;
	end
	D1 = 1'b0;
end 

// D0
initial
begin
	repeat(5)
	begin
		D0 = 1'b0;
		D0 = #20000 1'b1;
		# 20000;
	end
	D0 = 1'b0;
	D0 = #380000 1'b1;
	# 20000;
	repeat(10)
	begin
		D0 = 1'b0;
		D0 = #20000 1'b1;
		# 20000;
	end
end 
endmodule

